-- This script and the game as a whole were written specifically to demonstrate my skills.
-- It is not a script taken from some other game. I wrote it from scratch in one evening.
-- I tried to keep it under 200 lines of code, and as a result, excluding spaces, as shown on GitHub..
-- I reached 200 and am not trying to deceive anyone.
-- The structure of the script looks bad, I don't write like that.
-- But due to the restrictions that everything must be written in one script,
-- I threw all the logic together.

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService      = game:GetService("TweenService")
local Debris            = game:GetService("Debris")

--// Remote, used for client-server communication to activate abilities
local AbilityFunction: RemoteFunction = ReplicatedStorage.AbilityFunction

--// Assets, containing reusable visual assets and sound effects
local Assets = script:WaitForChild("Assets")
local Sounds = script:WaitForChild("Sounds")

--// Utils

-- Basic linear interpolation function
local function _lerp(a: number, b: number, t: number)
	return a + (b - a) * t
end

-- Quadratic Bezier curve for trajectory calculation
local function _quadBazie(t: number, p0: Vector3, p1: Vector3, p2: Vector3)
	return _lerp(_lerp(p0, p1, t), _lerp(p1, p2, t), t)
end	

-- Checks if a character has a HumanoidRootPart
local function _CharacterHasHRP(character: Model)
	return character and character:FindFirstChild("HumanoidRootPart") ~= nil
end

--// Meta & Abilities

-- AbilityMeta class stores metadata and logic for cooldown based abilities
local AbilityMeta = {}
AbilityMeta.__index = AbilityMeta

-- Constructor for a new ability
function AbilityMeta.new(name: string, cooldown: number, action)
	return setmetatable({
		Name = name,         -- Name of the ability
		Cooldown = cooldown, -- Cooldown time in seconds
		LastUsed = 0,        -- Timestamp of last usage
		Action = action,     -- Function to execute ability logic
	}, AbilityMeta)
end

-- Method to activate the ability if cooldown has passed
function AbilityMeta:Activate(player, Target: Vector3)
	if tick() - self.LastUsed >= self.Cooldown then
		self.LastUsed = tick()
		self.Action(player, Target)
	else
		warn(self.Name .. " is on cooldown for", player)
	end
end

-- Ability Logic Implementation
local Abilities = {}     -- Registry of all defined abilities
local Ability = {}       -- Ability class with implementations
local AbilityConfig = {  -- Ability configuration parameters
	Dash = {
		Speed = 56,
		Duration = 0.35,
	},
	Shield = {
		Size = Vector3.new(25,25,25),
		Duration = 4
	},
	Explosion = {
		Speed = 1000,
		Duration = 10
	}
}

-- Dash ability: Temporarily increases speed and plays visual/audio effects
function Ability:Dash()
	if _CharacterHasHRP(self.Character) then	
		local character: Model = self.Character
		local humanoid: Humanoid = character:FindFirstChildOfClass("Humanoid")
		if humanoid then
			-- SFX, Play dash sound.
			local newSound: Sound = Sounds.Dash:Clone()
			newSound.Parent = character.HumanoidRootPart
			newSound:Play()
			newSound.PlayOnRemove = true

			-- VFX, Clone dash particle emitters and attach to character
			local VFX_Table = {}

			for i, emitter in pairs(Assets.DashVFX:GetChildren()) do
				if emitter:IsA("ParticleEmitter") then
					VFX_Table[i] = emitter:Clone()
					VFX_Table[i].Parent = character.HumanoidRootPart
					VFX_Table[i].Enabled = true

					Debris:AddItem(VFX_Table[i], AbilityConfig.Dash.Duration + 5)
				end
			end
			
			-- Temporarily make character semi-transparent
			for _, object in pairs(character:GetDescendants()) do
				if object:IsA("BasePart") or object:IsA("MeshPart") then
					if object ~= character.HumanoidRootPart then
						object.Transparency = .75
					end
				end
			end
			
			-- Restore transparency after delay
			task.spawn(function()
				task.wait(AbilityConfig.Dash.Duration)

				for _, object in pairs(character:GetDescendants()) do
					if object:IsA("BasePart") or object:IsA("MeshPart") then
						if object ~= character.HumanoidRootPart then
							object.Transparency = 0
						end
					end
				end

				for i, emitter in pairs(VFX_Table) do
					emitter.Enabled = false
				end
			end)

			-- Ability, Increase and then restore walk speed

			humanoid.WalkSpeed = AbilityConfig.Dash.Speed
			task.wait(AbilityConfig.Dash.Duration)
			humanoid.WalkSpeed = 16
		end
	else
		warn("Humanoid not found for player", self.Name)
	end	
end

-- Explosion ability: Fires a flame projectile with arc trajectory and plays explosion effect
function Ability:Explosion(target: Vector3)
	if _CharacterHasHRP(self.Character) then
		local character: Model = self.Character
		local FireArrow: Part = Assets.FireArrow
		local HRMAtts:   Part = Assets.HRMAtts
		local TPart:     Part = Assets.TrajectoryPart
		local HitPart:   Part = Assets.HitPart
		
		-- SFX, Play casting flame sound
		local AttackAtt: Attachment = HRMAtts.Attack:Clone()
		AttackAtt.Parent = character.HumanoidRootPart
		AttackAtt.Flame:Play()
		
		-- VFX, Emit initial cast particles
		for _, emitter in pairs(AttackAtt:GetChildren()) do
			if emitter:IsA("ParticleEmitter") then
				emitter:Emit(emitter:GetAttribute("EmitCount"))
			end
		end
		
		-- Clone and position projectile
		local newArrow: Part = FireArrow:Clone()
		newArrow.CFrame = AttackAtt.WorldCFrame
		newArrow.Parent = workspace.Projectiles
		
		-- Calculate Bezier curve trajectory
		local Mag = (character.HumanoidRootPart.Position - target).Magnitude
		local TPositions = {
			AttackAtt.WorldCFrame.Position,
			(AttackAtt.WorldCFrame.Position + target) / 2,
			target
		}
		
		-- Create parts along the path (for visualization / targeting)
		local TParts = {}
		for i = 0, 1, .1  do
			local newTPart = TPart:Clone()
			newTPart.CFrame = CFrame.new(_quadBazie(i, TPositions[1], TPositions[2] + Vector3.new(0, 10, 0), TPositions[3]))
			newTPart.Parent = workspace

			table.insert(TParts, newTPart)

			Debris:AddItem(newTPart, AbilityConfig.Explosion.Duration)
		end
		
		-- Tween the projectile along the path
		
		for _, TPart in pairs(TParts) do
			local targetCFrame = CFrame.lookAt(newArrow.Position, TPart.Position)
			newArrow.CFrame = targetCFrame

			local Tween = TweenService:Create(newArrow, TweenInfo.new(Mag/AbilityConfig.Explosion.Speed, Enum.EasingStyle.Linear), {
				Position = TPart.Position
			})
			Tween:Play()
			Tween.Completed:Wait()
		end
		
		-- VFX, Disable trail particles after tween complete.
		
		for _, emitter in pairs(newArrow.Att:GetChildren()) do
			if emitter:IsA("ParticleEmitter") then
				emitter.Enabled = false
			end
		end
		
		-- Spawn explosion part and play explosion sound
		local newHitPart = HitPart:Clone()
		newHitPart.Position = target + Vector3.new(0, .25, 0)
		newHitPart.Parent = workspace
		newHitPart.HitSound:Play()
		
		task.wait(.1) -- wait until cloned effects will upload to the clients.
		
		-- Emit explosion particles
		for _, emitter in pairs(newHitPart:GetDescendants()) do
			if emitter:IsA("ParticleEmitter") then
				emitter:Emit(emitter:GetAttribute("EmitCount"))
			end
		end
		-- Schedule cleanup of parts
		Debris:AddItem(newHitPart, AbilityConfig.Explosion.Duration)
		Debris:AddItem(newArrow, AbilityConfig.Explosion.Duration)
	else
		warn("Humanoid not found for player", self.Name)
	end
end

-- Shield ability: Spawns a temporary shield with VFX and bounce animation
function Ability:Shield()
	if _CharacterHasHRP(self.Character) then
		local character: Model = self.Character

		-- SFX, Play shield sound

		local newSound: Sound = Sounds.Shield:Clone()
		newSound.Parent = character.HumanoidRootPart
		newSound:Play()
		newSound.PlayOnRemove = true

		-- Create and expand the shield part with animation

		local newShield: Part = Assets.ShieldPart:Clone()
		newShield.CFrame = character.HumanoidRootPart.CFrame
		newShield.Size = Vector3.new(1,1,1)
		newShield.Parent = workspace

		TweenService:Create(newShield, TweenInfo.new(1, Enum.EasingStyle.Bounce), {
			Size = AbilityConfig.Shield.Size
		}):Play()

		task.wait(AbilityConfig.Shield.Duration)
		
		-- VFX, Stop particles
		for _, emitter in pairs(newShield.Core:GetChildren()) do
			if emitter:IsA("ParticleEmitter") then
				emitter.Enabled = false
			end
		end
		
		-- Collapse and fade the shield
		TweenService:Create(newShield, TweenInfo.new(.5, Enum.EasingStyle.Bounce), {
			Size = Vector3.new(1,1,1),
			Transparency = 1
		}):Play()

		Debris:AddItem(newShield, AbilityConfig.Shield.Duration + 3)
	else
		warn("Humanoid not found for player", self.Name)
	end
end

--// Ability Registration
-- Define all abilities and their activation logic

Abilities["Dash"] = AbilityMeta.new("Dash", 3, function(player)
	local self = { Character = player.Character }
	setmetatable(self, { __index = Ability })
	self:Dash()
end)

Abilities["Explosion"] = AbilityMeta.new("Explosion", 1, function(player, target: Vector3)
	local self = { Character = player.Character }
	setmetatable(self, { __index = Ability })
	self:Explosion(target)
end)

Abilities["Shield"] = AbilityMeta.new("Shield", 5, function(player)
	local self = { Character = player.Character }
	setmetatable(self, { __index = Ability })
	self:Shield()
end)

--// Remote Function Handler
-- Executes the appropriate ability on the server when called from the client

AbilityFunction.OnServerInvoke = function(player, abilityName: string, target: Vector3)
	local ability = Abilities[abilityName]
	if ability then
		ability:Activate(player, target)
	else
		warn("Ability not found:", abilityName)
	end
end
